using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 * 쉐이더란?
 * - 화면 상에 출력되는 픽셀의 색상을 계산하기 위한 도구를 의미한다. (즉,
 * 쉐이더를 활용하면 화면 상에 출력 될 물체의 표면에 대한 재질을 표현하는
 * 것이 가능하다.)
 * 
 * 또한, 쉐이더는 일반적인 프로그램과 달리 GPU 에 의해서 실행되기 때문에
 * GPU 상에 구동되는 프로그램이기도 하다.
 * 
 * 쉐이더는 렌더링 파이프라인의 특정 단계를 커스텀하게 제어 할 수 있는
 * 수단이기 때문에 쉐이더를 활용하면 다양한 결과물을 화면 상에 출력하는
 * 것이 가능하다. (즉, 렌더링 파이프라인은 고정 파이프라인과 프로그래머블
 * 파이프라인으로 나뉘며 이중 쉐이더는 프로그래머블 파이프라인과 연관이
 * 있다는 것을 알 수 있다.)
 * 
 * 렌더링 파이프라인이란?
 * - 3 차원 공간 상에 배치 된 물체가 화면 상에 출력되기 위해서 거치는 일련의
 * 단계를 의미한다. (즉, Unity 씬 상에 배치 된 물체가 화면 상에 출력되기
 * 위해서 많은 연산이 필요하다는 것을 알 수 있다.)
 * 
 * 렌더링 파이프라인 종류
 * - 고정 렌더링 파이프라인
 * - 프로그래머블 렌더링 파이프라인
 * 
 * 고정 렌더핑 파이프라인 vs 프로그래머블 렌더링 파이프라인
 * - 고정 렌더링 파이프라인은 특정 단계를 커스텀하게 제어하는 것은 불가능하며
 * 해당 파이프라인을 제작한 밴더 사에서 제공해주는 옵션의 조합으로 물체의
 * 표면을 제한적으로 표현 할 수 있다는 단점이 존재한다.
 * 
 * 반면, 프로그래머블 파이프라인은 특정 단계를 커스텀하게 제어하는 것이
 * 가능하며 해당 단계를 제어하기 위한 수단으로 쉐이더가 사용된다. (즉,
 * 쉐이더를 활용하면 특정 단계를 커스텀하게 제어함으로서 다양한 결과물을
 * 만들어내는 것이 가능하다.)
 * 
 * 렌더링 파이프라인 주요 연산 종류
 * - 정점 연산
 * - 래스터라이즈 연산
 * - 픽셀 (프래그먼트) 연산
 * 
 * 정점 연산이란?
 * - 3 차원 공간 상에 존재하는 정점 정보를 2 차원으로 변환하는 연산을
 * 의미하며 해당 단계는 정점 쉐이더에 의해서 처리된다. (즉, 정점 연산 단계를
 * 커스텀하게 제어하고 싶다면 정점 쉐이더를 제작하면 된다는 것을 알 수 있다.)
 * 
 * 래스터라이즈 연산이란?
 * - 정점 연산에 의해서 계산 된 물체의 표면을 연산하는 단계를 의미하며
 * 해당 단계는 그래픽 카드 전용 연산이기 때문에 해당 단계는 커스텀하게 제어
 * 하는 것이 불가능하다. (즉, 래스터라이즈 연산 단계를 거치면 물체의 색상을
 * 계산하기 위한 픽셀이 결정된다는 것을 알 수 있다.)
 */
/** Example 16 */
public class CExample_16 : CSceneManager {
	#region 프로퍼티
	public override string SceneName => KDefine.G_SCENE_N_EXAMPLE_16;
	#endregion // 프로퍼티

	#region 함수
	/** 초기화 */
	public override void Awake() {
		base.Awake();
	}
	#endregion // 함수
}
